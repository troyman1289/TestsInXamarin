// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace Backend.Interfaces.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class CalculationManagerMock : global::PCLMock.MockBase<global::Backend.Interfaces.ICalculationManager>, global::Backend.Interfaces.ICalculationManager
    {
        public CalculationManagerMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public global::System.Collections.Generic.IList<global::Backend.Model.GlobalCalculation> GetAllGlobalCalculations()
        {
            return this.Apply(x => x.GetAllGlobalCalculations());
        }

        public void RemoveLocalCalculation(global::Backend.Model.GlobalCalculation globalCalculation, global::Backend.Model.LocalCalculation localCalculation)
        {
            this.Apply(x => x.RemoveLocalCalculation(globalCalculation, localCalculation));
        }

        public void RemoveLocalCalculationWithRefresh(global::Backend.Model.GlobalCalculation globalCalculation, global::Backend.Model.LocalCalculation localCalculation)
        {
            this.Apply(x => x.RemoveLocalCalculationWithRefresh(globalCalculation, localCalculation));
        }

        public void AddNewGlobalCalculation(global::Backend.Model.GlobalCalculation globalCalculation, global::System.Decimal startOperand)
        {
            this.Apply(x => x.AddNewGlobalCalculation(globalCalculation, startOperand));
        }

        public void RemoveGlobalCalculation(global::Backend.Model.GlobalCalculation globalCalculation)
        {
            this.Apply(x => x.RemoveGlobalCalculation(globalCalculation));
        }

        public void SetOperationString(global::Backend.Model.LocalCalculation localCalculation)
        {
            this.Apply(x => x.SetOperationString(localCalculation));
        }

        public void LoadGlobalCalculation(global::Backend.Model.GlobalCalculation globalCalculation)
        {
            this.Apply(x => x.LoadGlobalCalculation(globalCalculation));
        }

        public void AddOperation(global::Backend.Model.LocalCalculation localCalculation, global::Backend.Model.Operation operation)
        {
            this.Apply(x => x.AddOperation(localCalculation, operation));
        }

        public void AddNewLocalCalculation(global::Backend.Model.GlobalCalculation globalCalculation, global::Backend.Model.LocalCalculation localCalculation)
        {
            this.Apply(x => x.AddNewLocalCalculation(globalCalculation, localCalculation));
        }

        public void SetResult(global::Backend.Model.LocalCalculation localCalculation)
        {
            this.Apply(x => x.SetResult(localCalculation));
        }

        public void RefreshGlobalResult(global::Backend.Model.GlobalCalculation globalCalculation)
        {
            this.Apply(x => x.RefreshGlobalResult(globalCalculation));
        }

        public global::System.Threading.Tasks.Task FetchGlobalCalculationsFromServiceAsync()
        {
            return this.Apply(x => x.FetchGlobalCalculationsFromServiceAsync());
        }
    }
}
namespace Backend.Interfaces.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class DataAccessMock : global::PCLMock.MockBase<global::Backend.Interfaces.IDataAccess>, global::Backend.Interfaces.IDataAccess
    {
        public DataAccessMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public global::System.Collections.Generic.IList<global::Backend.Model.GlobalCalculation> GetAllGlobalCalculations()
        {
            return this.Apply(x => x.GetAllGlobalCalculations());
        }

        public void Insert(global::System.Collections.Generic.IEnumerable<global::System.Object> objs)
        {
            this.Apply(x => x.Insert(objs));
        }

        public void Insert(global::System.Object obj)
        {
            this.Apply(x => x.Insert(obj));
        }

        public void Remove(global::System.Collections.Generic.IEnumerable<global::System.Object> objs)
        {
            this.Apply(x => x.Remove(objs));
        }

        public void Remove(global::System.Object obj)
        {
            this.Apply(x => x.Remove(obj));
        }

        public global::System.Collections.Generic.IList<global::Backend.Model.LocalCalculation> GetLocalCalculations(global::System.Int32 parentGlobalCalculationId)
        {
            return this.Apply(x => x.GetLocalCalculations(parentGlobalCalculationId));
        }

        public global::System.Collections.Generic.IList<global::Backend.Model.Operation> GetOperations(global::System.Int32 localCalculationParentId)
        {
            return this.Apply(x => x.GetOperations(localCalculationParentId));
        }

        public void Update(global::System.Object obj)
        {
            this.Apply(x => x.Update(obj));
        }
    }
}
namespace Backend.Interfaces.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class NavigationServiceMock : global::PCLMock.MockBase<global::Backend.Interfaces.INavigationService>, global::Backend.Interfaces.INavigationService
    {
        public NavigationServiceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public void PushView(global::System.String key)
        {
            this.Apply(x => x.PushView(key));
        }

        public void GoBack()
        {
            this.Apply(x => x.GoBack());
        }
    }
}
namespace Backend.Interfaces.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class PopUpServiceMock : global::PCLMock.MockBase<global::Backend.Interfaces.IPopUpService>, global::Backend.Interfaces.IPopUpService
    {
        public PopUpServiceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public void ShowOkCancelPopUp(global::System.String title, global::System.String message, global::System.Action<global::System.Boolean> resultAction)
        {
            this.Apply(x => x.ShowOkCancelPopUp(title, message, resultAction));
        }

        public void ShowAlertPopUp(global::System.String title, global::System.String message, global::System.Action resultAction)
        {
            this.Apply(x => x.ShowAlertPopUp(title, message, resultAction));
        }
    }
}
namespace Backend.Interfaces.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class RestServiceMock : global::PCLMock.MockBase<global::Backend.Interfaces.IRestService>, global::Backend.Interfaces.IRestService
    {
        public RestServiceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.IList<global::Backend.Model.GlobalCalculation>> FetchGlobalCalculations()
        {
            return this.Apply(x => x.FetchGlobalCalculations());
        }
    }
}
namespace Backend.Interfaces.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class SqliteConnectionServiceMock : global::PCLMock.MockBase<global::Backend.Interfaces.ISqliteConnectionService>, global::Backend.Interfaces.ISqliteConnectionService
    {
        public SqliteConnectionServiceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public global::SQLite.Net.SQLiteConnection GetConnection()
        {
            return this.Apply(x => x.GetConnection());
        }
    }
}

